<?php
	
class QuickSearch {
	
	/**
	* User search query $_GET['q']
	* @access public
	* @var string
	*/
	public $search_term;
	
	/**
	* User data type $_GET['type']
	* @access public
	* @var string
	*/
    public $data_type;
    
    /**
	* User search query $_GET['use_replace']
	* If set to true the search will be generated by the spellcheck
	* Pass 0 for false and 1 for true
	* @access public
	* @var boolean
	*/
	public $use_replace = true;
	
	
	/**
	* Json Suggest Object
	* Becomes and object when spellcheck is used
	* @access public
	* @var null
	*/
	public $spell_object = null;
	
	
    public function __construct($search_term, $data_type, $use_replace, $spell_object){
	    $this->initial_search = urldecode($search_term);
        $this->search_term    = urldecode($search_term);
        $this->data_type      = $data_type;
        $this->multiple_keywords = $this->search_term;
        
        
        if($this->search_term){
	       // $this->search_term = preg_replace("/[^ \w]+/", "", $search_term);
        }
      
        if (isset($use_replace)){
		    if ($use_replace === '1' || $use_replace === '0'){
		        $this->use_replace = (bool)$use_replace;
		    } else {
				$this->use_replace = $use_replace;
			}
		} 
		
		// If we are using suggestion to replace the search query for mispelled words
		if($this->use_replace){
			
			
			// If auto replace is on split the words to find spelling mistakes in each word
			// Words are split by comma and 
			$this->all_keywords = preg_split("/[\s,]+/", $this->search_term);

			$this->multiple_keywords = '';
			foreach($this->all_keywords as $keyword){
				$word_suggest = file_get_contents("http://silo.lib.wayne.edu/solr4/DCArchive/spell?rows=0&spellcheck=true&spellcheck.collate=true&wt=json&q={$keyword}");
				$word_suggest = json_decode($word_suggest);
				if($word_suggest->response->numFound <= 0){
					$suggest = $word_suggest->spellcheck->suggestions;
					$this->multiple_keywords .= $suggest[1]->suggestion[0] . " ";
				} else {
					$this->multiple_keywords .= $keyword . " ";
				}
			}
			$this->multiple_keywords = trim($this->multiple_keywords);
			
		} else {
			// Serve backup content *** Also use synonyms
		}
    }
    
    
    public function spell_multiple(){
	    return $this->multiple_keywords . "<br/>";
    }
      
    public function spell_check(){
	    if($this->spell_object != NULL){
		    return $this->spell_object;
	    } else{
		    if($this->use_replace){
			    if($this->initial_search == $this->multiple_keywords){
				    return "<h4>Search Term: $this->initial_search</h4>";
			    } else {
		   	 		return "<h4>Searching for $this->multiple_keywords.<br/> Search for  <a href='http://library2.wayne.edu/test/thomas/library/partials/header/classes/class-quicksearch.php?type=all&use_replace=0&q=$this->initial_search'>$this->initial_search</a> instead?</h4><br/>";
		   	 	}
		   	} else {
			   	return "<h4>Search Term: $this->initial_search</h4>";
		   	}
	    }
    }
    
    public function database(){
	    if($this->data_type == 'all' || $this->data_type == 'database'){
	        $conn = new PDO('mysql:host=localhost;dbname=resources', 'load', 'REm1ngt0n');
			if($conn->beginTransaction()){
				$sth = $conn->prepare("SELECT title,url,description FROM resources_view WHERE title LIKE '%{$this->multiple_keywords}%'");
				$sth->execute();
				$results = $sth->fetchAll();
				$number = count($results);
				foreach ($results as $result){
					$json_return .= "<h4><a href='{$result[url]}'>{$result[title]}</a></h4>";
					$json_return .= "<h6>{$result[url]}</h6>";
					$json_return .= "<p>{$result[description]}</p>";
					if(strtolower($result[title]) === strtolower($this->multiple_keywords)){
						$json_return .= "<blockquote><strong><em>This is an exact match. Set priority.</em></strong></blockquote>";
					}
					$json_return .= "<hr/>";
				}
				if($number > 0){
					return array($number, $json_return);
				} else {
					return array('No database', $number);
				}
				$conn = null;
			} else {
				return "No Connection";
			}
		}
    }
}


$db = new QuickSearch($_GET['q'], $_GET['type'], $_GET['use_replace']);
echo $db->spell_multiple();
echo $db->spell_check();
$json_feed = json_encode($db->database());

$tmp = $db->database();
echo $tmp[0] . " results";
echo "<br/>";
echo $tmp[1];

$variable = file_get_contents("http://silo.lib.wayne.edu/solr4/DCArchive/spell?rows=0&spellcheck=true&spellcheck.collate=true&wt=json&q={$_GET['q']}");

$word = json_decode($variable);


echo "<br/>";
echo "<br/>";
echo "<br/>";

echo "Number of instances the query is matched with our records for <strong>" . $_GET['q'] . "</strong>: " . $word->response->numFound;


echo "<h3>Suggestions</h3>";

$suggest = $word->spellcheck->suggestions;

foreach($suggest[1]->suggestion as $suggestion){
	echo $suggestion . "<br/>";
}

echo "<br/>";
echo "<br/>";
echo "<br/>";

